{
    "sourceFile": "lib/mix/tasks/gen/spark.gen.section.ex",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1738185092653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738185275092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,15 @@\n       nested = options[:nested] || false\n \n       section_definition = generate_section(section_name, attributes, no_depend_modules)\n \n+      # FIXED: Using `find_module/2` and `create_module/2`\n+      existing_content = Igniter.Project.Module.find_module(igniter, dsl_module) || \"\"\n+\n+      new_content = insert_section(existing_content, section_definition, nested)\n+\n       igniter\n-      |> Igniter.Project.Module.modify_module(dsl_module, fn content ->\n-        insert_section(content, section_definition, nested)\n-      end)\n+      |> Igniter.Project.Module.create_module(dsl_module, new_content)\n     end\n \n     defp parse_attributes(attributes) do\n       attributes\n"
                },
                {
                    "date": 1738185378322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,37 +4,31 @@\n     Generate a Spark DSL Section.\n \n     ## Example\n \n-        mix spark.gen.section Spark.Test.Contact.Dsl --name address \\\n-          --attributes street:string:\"The street address\" \\\n-          --nested false\n+        mix spark.gen.section Spark.Test.Contact.Dsl --name address\n \n     ## Options\n \n-    * `--name` or `-n` - The name of the section.\n-    * `--attributes` or `-a` - Comma-separated list of attributes, formatted as `name:type:\"doc\"`.\n-    * `--nested` - If `true`, this section will be a nested sub-section of another section.\n-    * `--no-depend-modules` - Modules that should not be dependencies.\n+    * `--persisted` - List of persisted keys to reference (e.g., `module`).\n+    * `--checks` - Placeholder for defining checks (not implemented yet).\n     \"\"\"\n \n     @shortdoc \"Generate a Spark DSL Section.\"\n     use Igniter.Mix.Task\n \n     @impl Igniter.Mix.Task\n     def info(_argv, _parent) do\n       %Igniter.Mix.Task.Info{\n-        positional: [:dsl_module],\n-        example: \"mix spark.gen.section Spark.Test.Contact.Dsl --name address --attributes street:string:\\\"The street address\\\" --nested false\",\n+        positional: [:section_module],\n+        example: \"mix spark.gen.section Spark.Test.Contact.Dsl --name address\",\n         schema: [\n-          name: :string,\n-          attributes: :csv,\n-          nested: :boolean,\n-          no_depend_modules: :csv\n+          persisted: :csv,\n+          checks: :csv\n         ],\n         aliases: [\n-          n: :name,\n-          a: :attributes\n+          p: :persisted,\n+          c: :checks\n         ]\n       }\n     end\n \n@@ -42,77 +36,24 @@\n     def igniter(igniter) do\n       arguments = igniter.args.positional\n       options = igniter.args.options\n \n-      dsl_module = Igniter.Project.Module.parse(arguments.dsl_module)\n-      section_name = options[:name]\n-      attributes = parse_attributes(options[:attributes])\n-      no_depend_modules = options[:no_depend_modules] || []\n-      nested = options[:nested] || false\n+      section_module = Igniter.Project.Module.parse(arguments.section_module)\n \n-      section_definition = generate_section(section_name, attributes, no_depend_modules)\n+      template = \"\"\"\n+      @moduledoc \\\"\\\"\\\"\n+      Generated Spark DSL Section.\n+      \\\"\\\"\\\"\n+      use Spark.Dsl.Section\n+      alias Spark.Dsl.Section\n \n-      # FIXED: Using `find_module/2` and `create_module/2`\n-      existing_content = Igniter.Project.Module.find_module(igniter, dsl_module) || \"\"\n+      def configure_section(dsl) do\n+      end\n+      \"\"\"\n \n-      new_content = insert_section(existing_content, section_definition, nested)\n-\n       igniter\n-      |> Igniter.Project.Module.create_module(dsl_module, new_content)\n+      |> Igniter.Project.Module.create_module(section_module, template)\n     end\n-\n-    defp parse_attributes(attributes) do\n-      attributes\n-      |> List.wrap()\n-      |> Enum.map(fn attr ->\n-        case String.split(attr, \":\", parts: 3) do\n-          [name, type, doc] -> {name, type, doc}\n-          [name, type] -> {name, type, \"\"}\n-          _ -> raise \"Invalid attribute format: #{attr}. Expected `name:type:\\\"doc\\\"`.\"\n-        end\n-      end)\n-    end\n-\n-    defp generate_section(name, attributes, no_depend_modules) do\n-      attributes_block =\n-        attributes\n-        |> Enum.map(fn {attr_name, type, doc} ->\n-          \"\"\"\n-          #{attr_name}: [\n-            type: :#{type},\n-            doc: \"#{doc}\"\n-          ]\n-          \"\"\"\n-        end)\n-        |> Enum.join(\",\\n\")\n-\n-      no_depend_block =\n-        if Enum.empty?(no_depend_modules) do\n-          \"\"\n-        else\n-          \"no_depend_modules: #{inspect(no_depend_modules)},\"\n-        end\n-\n-      \"\"\"\n-      @#{name} %Spark.Dsl.Section{\n-        name: :#{name},\n-        #{no_depend_block}\n-        schema: [\n-          #{attributes_block}\n-        ]\n-      }\n-      \"\"\"\n-    end\n-\n-    defp insert_section(content, section_definition, nested) do\n-      if nested do\n-        # Locate the nearest section block and append it inside\n-        Regex.replace(~r/(sections: \\[)([^\\]]*)\\]/, content, \"\\\\1\\\\2,\\n  #{section_definition}]\")\n-      else\n-        # Append as a top-level section\n-        content <> \"\\n\" <> section_definition\n-      end\n-    end\n   end\n else\n   defmodule Mix.Tasks.Spark.Gen.Section do\n     @moduledoc \"\"\"\n"
                }
            ],
            "date": 1738185092653,
            "name": "Commit-0",
            "content": "if Code.ensure_loaded?(Igniter) do\n  defmodule Mix.Tasks.Spark.Gen.Section do\n    @moduledoc \"\"\"\n    Generate a Spark DSL Section.\n\n    ## Example\n\n        mix spark.gen.section Spark.Test.Contact.Dsl --name address \\\n          --attributes street:string:\"The street address\" \\\n          --nested false\n\n    ## Options\n\n    * `--name` or `-n` - The name of the section.\n    * `--attributes` or `-a` - Comma-separated list of attributes, formatted as `name:type:\"doc\"`.\n    * `--nested` - If `true`, this section will be a nested sub-section of another section.\n    * `--no-depend-modules` - Modules that should not be dependencies.\n    \"\"\"\n\n    @shortdoc \"Generate a Spark DSL Section.\"\n    use Igniter.Mix.Task\n\n    @impl Igniter.Mix.Task\n    def info(_argv, _parent) do\n      %Igniter.Mix.Task.Info{\n        positional: [:dsl_module],\n        example: \"mix spark.gen.section Spark.Test.Contact.Dsl --name address --attributes street:string:\\\"The street address\\\" --nested false\",\n        schema: [\n          name: :string,\n          attributes: :csv,\n          nested: :boolean,\n          no_depend_modules: :csv\n        ],\n        aliases: [\n          n: :name,\n          a: :attributes\n        ]\n      }\n    end\n\n    @impl Igniter.Mix.Task\n    def igniter(igniter) do\n      arguments = igniter.args.positional\n      options = igniter.args.options\n\n      dsl_module = Igniter.Project.Module.parse(arguments.dsl_module)\n      section_name = options[:name]\n      attributes = parse_attributes(options[:attributes])\n      no_depend_modules = options[:no_depend_modules] || []\n      nested = options[:nested] || false\n\n      section_definition = generate_section(section_name, attributes, no_depend_modules)\n\n      igniter\n      |> Igniter.Project.Module.modify_module(dsl_module, fn content ->\n        insert_section(content, section_definition, nested)\n      end)\n    end\n\n    defp parse_attributes(attributes) do\n      attributes\n      |> List.wrap()\n      |> Enum.map(fn attr ->\n        case String.split(attr, \":\", parts: 3) do\n          [name, type, doc] -> {name, type, doc}\n          [name, type] -> {name, type, \"\"}\n          _ -> raise \"Invalid attribute format: #{attr}. Expected `name:type:\\\"doc\\\"`.\"\n        end\n      end)\n    end\n\n    defp generate_section(name, attributes, no_depend_modules) do\n      attributes_block =\n        attributes\n        |> Enum.map(fn {attr_name, type, doc} ->\n          \"\"\"\n          #{attr_name}: [\n            type: :#{type},\n            doc: \"#{doc}\"\n          ]\n          \"\"\"\n        end)\n        |> Enum.join(\",\\n\")\n\n      no_depend_block =\n        if Enum.empty?(no_depend_modules) do\n          \"\"\n        else\n          \"no_depend_modules: #{inspect(no_depend_modules)},\"\n        end\n\n      \"\"\"\n      @#{name} %Spark.Dsl.Section{\n        name: :#{name},\n        #{no_depend_block}\n        schema: [\n          #{attributes_block}\n        ]\n      }\n      \"\"\"\n    end\n\n    defp insert_section(content, section_definition, nested) do\n      if nested do\n        # Locate the nearest section block and append it inside\n        Regex.replace(~r/(sections: \\[)([^\\]]*)\\]/, content, \"\\\\1\\\\2,\\n  #{section_definition}]\")\n      else\n        # Append as a top-level section\n        content <> \"\\n\" <> section_definition\n      end\n    end\n  end\nelse\n  defmodule Mix.Tasks.Spark.Gen.Section do\n    @moduledoc \"\"\"\n    Generate a Spark DSL Section.\n    \"\"\"\n\n    @shortdoc \"Generate a Spark DSL Section.\"\n\n    use Mix.Task\n\n    def run(_argv) do\n      Mix.shell().error(\"\"\"\n      The task 'spark.gen.section' requires Igniter to be installed.\n\n      Please install Igniter and try again.\n\n      For more information, see: https://hexdocs.pm/igniter\n      \"\"\")\n\n      exit({:shutdown, 1})\n    end\n  end\nend\n"
        }
    ]
}