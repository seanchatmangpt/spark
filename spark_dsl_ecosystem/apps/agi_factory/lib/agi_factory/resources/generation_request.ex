defmodule AgiFactory.Resources.GenerationRequest do
  @moduledoc """
  Generation Request resource tracking individual DSL generation attempts.
  
  Each generation request represents a single attempt to generate a DSL
  implementation, including the strategy used, parameters, and results.
  """
  
  use Ash.Resource,
    extensions: [AshPostgres.DataLayer],
    data_layer: AshPostgres.DataLayer

  postgres do
    table "generation_requests"
    repo AgiFactory.Repo
    
    references do
      reference :dsl_project, on_delete: :delete
    end
  end

  attributes do
    uuid_primary_key :id
    
    attribute :strategy, :atom do
      description "Generation strategy used"
      constraints [one_of: [:template, :pattern_based, :example_driven, :hybrid, :ai_assisted]]
      allow_nil? false
    end
    
    attribute :status, :atom do
      description "Current request status"
      constraints [one_of: [:pending, :running, :completed, :failed, :cancelled]]
      default :pending
    end
    
    attribute :parameters, :map do
      description "Parameters and configuration for this generation attempt"
      default %{}
    end
    
    attribute :generated_code, :string do
      description "Code generated by this request"
      constraints [max_length: 100000]
    end
    
    attribute :quality_metrics, :map do
      description "Quality metrics for this generation attempt"
      default %{}
    end
    
    attribute :execution_time_ms, :integer do
      description "Time taken to execute this request in milliseconds"
      constraints [min: 0]
    end
    
    attribute :error_details, :map do
      description "Error details if the request failed"
    end
    
    attribute :started_at, :utc_datetime do
      description "When the generation started"
    end
    
    attribute :completed_at, :utc_datetime do
      description "When the generation completed"
    end
    
    timestamps()
  end

  relationships do
    belongs_to :dsl_project, AgiFactory.Resources.DslProject do
      description "The DSL project this request belongs to"
      allow_nil? false
    end
  end

  actions do
    defaults [:create, :read, :update, :destroy]
    
    create :start_generation do
      description "Starts a new generation request"
      accept [:strategy, :parameters]
      
      argument :dsl_project_id, :uuid do
        description "ID of the DSL project"
        allow_nil? false
      end
      
      change AgiFactory.Changes.ValidateGenerationParameters
      change set_attribute(:status, :running)
      change set_attribute(:started_at, &DateTime.utc_now/0)
      change relate_actor(:dsl_project, argument(:dsl_project_id))
      
      after_action AgiFactory.AfterActions.ExecuteGeneration
    end
    
    update :complete_successfully do
      description "Marks generation as successfully completed"
      accept [:generated_code, :quality_metrics, :execution_time_ms]
      
      change AgiFactory.Changes.ValidateGeneratedCode
      change set_attribute(:status, :completed)
      change set_attribute(:completed_at, &DateTime.utc_now/0)
      
      after_action AgiFactory.AfterActions.UpdateProjectWithResults
    end
    
    update :mark_failed do
      description "Marks generation as failed"
      accept [:error_details, :execution_time_ms]
      
      change set_attribute(:status, :failed)
      change set_attribute(:completed_at, &DateTime.utc_now/0)
      
      after_action AgiFactory.AfterActions.HandleGenerationFailure
    end
    
    update :cancel do
      description "Cancels a running generation request"
      accept []
      
      change set_attribute(:status, :cancelled)
      change set_attribute(:completed_at, &DateTime.utc_now/0)
    end
    
    read :by_project do
      description "Read generation requests for a specific project"
      
      argument :dsl_project_id, :uuid do
        description "DSL project ID"
        allow_nil? false
      end
      
      filter expr(dsl_project_id == ^arg(:dsl_project_id))
      prepare build(sort: [inserted_at: :desc])
    end
    
    read :by_status do
      description "Read generation requests by status"
      
      argument :status, :atom do
        description "Status to filter by"
        allow_nil? false
        constraints [one_of: [:pending, :running, :completed, :failed, :cancelled]]
      end
      
      filter expr(status == ^arg(:status))
    end
    
    read :by_strategy do
      description "Read generation requests by strategy"
      
      argument :strategy, :atom do
        description "Strategy to filter by"
        allow_nil? false
        constraints [one_of: [:template, :pattern_based, :example_driven, :hybrid, :ai_assisted]]
      end
      
      filter expr(strategy == ^arg(:strategy))
    end
    
    read :successful do
      description "Read only successfully completed requests"
      filter expr(status == :completed and not is_nil(generated_code))
    end
    
    read :performance_analysis do
      description "Read requests for performance analysis"
      filter expr(not is_nil(execution_time_ms))
      prepare build(sort: [execution_time_ms: :asc])
    end
  end
  
  validations do
    validate {AgiFactory.Validations.GenerationParameters, []}
    validate {AgiFactory.Validations.ExecutionTimeReasonable, max_minutes: 30}
  end
  
  calculations do
    calculate :success_rate, :decimal do
      description "Success rate for this strategy across all requests"
      calculation AgiFactory.Calculations.StrategySuccessRate
    end
    
    calculate :duration_seconds, :integer do
      description "Duration of the generation request in seconds"
      calculation AgiFactory.Calculations.RequestDuration
    end
    
    calculate :quality_score, :decimal do
      description "Overall quality score from metrics"
      calculation AgiFactory.Calculations.QualityScore
    end
  end

  def description do
    """
    Generation Request tracks individual DSL generation attempts,
    including strategy, parameters, execution details, and results.
    This enables analysis of which strategies work best for different
    types of requirements.
    """
  end
end