defmodule DslSynthesizer.Resources.GenerationStrategy do
  @moduledoc """
  GenerationStrategy resource representing a specific approach to DSL generation.
  
  A GenerationStrategy defines a particular method for generating DSL code,
  including its configuration, success metrics, and generated candidates.
  """
  
  use Ash.Resource,
    extensions: [AshPostgres.DataLayer],
    data_layer: AshPostgres.DataLayer

  postgres do
    table "generation_strategies"
    repo DslSynthesizer.Repo
    
    references do
      reference :code_candidates, on_delete: :delete
    end
  end

  attributes do
    uuid_primary_key :id
    
    attribute :strategy_type, :atom do
      description "Type of generation strategy"
      allow_nil? false
      constraints [one_of: [:template, :pattern_based, :example_driven, :hybrid, :ai_assisted, :genetic, :rule_based, :machine_learning]]
    end
    
    attribute :specification_data, :map do
      description "Input specification for generation"
      allow_nil? false
    end
    
    attribute :generation_options, :map do
      description "Options and parameters for this strategy"
      default %{}
    end
    
    attribute :status, :atom do
      description "Current status of the strategy execution"
      constraints [one_of: [:pending, :running, :completed, :failed, :cancelled]]
      default :pending
    end
    
    attribute :processing_time_ms, :integer do
      description "Time taken to execute this strategy"
      constraints [min: 0]
    end
    
    attribute :success_score, :decimal do
      description "Overall success score (0-1)"
      constraints [min: 0, max: 1]
    end
    
    attribute :error_details, :map do
      description "Details of any errors encountered"
      default %{}
    end
    
    attribute :strategy_metadata, :map do
      description "Metadata about strategy execution"
      default %{}
    end
    
    attribute :performance_metrics, :map do
      description "Performance metrics for this execution"
      default %{}
    end
    
    attribute :resource_usage, :map do
      description "Resource usage during execution"
      default %{}
    end
    
    attribute :quality_indicators, :map do
      description "Quality indicators for generated code"
      default %{}
    end
    
    attribute :optimization_applied, :boolean do
      description "Whether optimization was applied"
      default false
    end
    
    attribute :strategy_version, :string do
      description "Version of the strategy implementation"
      constraints [max_length: 20]
    end
    
    timestamps()
  end

  relationships do
    has_many :code_candidates, DslSynthesizer.Resources.CodeCandidate do
      description "Code candidates generated by this strategy"
    end
  end

  actions do
    defaults [:create, :read, :update, :destroy]
    
    create :execute_strategy do
      description "Execute a generation strategy"
      accept [:strategy_type, :specification_data, :generation_options]
      
      change set_attribute(:status, :running)
      change DslSynthesizer.Changes.InitializeStrategy
      
      after_action DslSynthesizer.AfterActions.ExecuteGeneration
      after_action DslSynthesizer.AfterActions.CalculateMetrics
    end
    
    update :complete_strategy do
      description "Mark strategy as completed"
      accept [:success_score, :processing_time_ms, :performance_metrics]
      
      change set_attribute(:status, :completed)
      change DslSynthesizer.Changes.FinalizeStrategy
    end
    
    update :fail_strategy do
      description "Mark strategy as failed"
      accept [:error_details]
      
      change set_attribute(:status, :failed)
    end
    
    update :optimize_strategy do
      description "Apply optimization to strategy"
      accept [:optimization_applied]
      
      change DslSynthesizer.Changes.OptimizeStrategy
    end
    
    read :by_status do
      description "Read strategies by status"
      
      argument :status, :atom do
        description "Status to filter by"
        allow_nil? false
      end
      
      filter expr(status == ^arg(:status))
      prepare build(sort: [inserted_at: :desc])
    end
    
    read :by_strategy_type do
      description "Read strategies by type"
      
      argument :strategy_type, :atom do
        description "Strategy type to filter by"
        allow_nil? false
      end
      
      filter expr(strategy_type == ^arg(:strategy_type))
    end
    
    read :successful do
      description "Read successful strategies"
      
      argument :minimum_score, :decimal do
        description "Minimum success score"
        default 0.7
      end
      
      filter expr(status == :completed and success_score >= ^arg(:minimum_score))
      prepare build(sort: [success_score: :desc])
    end
    
    read :recent do
      description "Read recent strategies"
      
      argument :timeframe, :string do
        description "Timeframe to look back"
        default "7d"
      end
      
      prepare DslSynthesizer.Preparations.FilterByTimeframe
      prepare build(sort: [inserted_at: :desc])
    end
  end
  
  validations do
    validate {DslSynthesizer.Validations.SpecificationDataValid, []}
    validate {DslSynthesizer.Validations.StrategyOptionsValid, []}
  end
  
  calculations do
    calculate :efficiency_score, :decimal do
      description "Efficiency based on time and quality"
      calculation DslSynthesizer.Calculations.EfficiencyScore
    end
    
    calculate :candidate_count, :integer do
      description "Number of candidates generated"
      calculation DslSynthesizer.Calculations.CandidateCount
    end
    
    calculate :average_candidate_quality, :decimal do
      description "Average quality of generated candidates"
      calculation DslSynthesizer.Calculations.AverageCandidateQuality
    end
  end

  aggregates do
    count :total_candidates, :code_candidates do
      description "Total number of code candidates"
    end
    
    avg :average_quality, :code_candidates, :overall_quality_score do
      description "Average quality of candidates"
    end
    
    max :best_quality, :code_candidates, :overall_quality_score do
      description "Best quality score achieved"
    end
  end

  def description do
    """
    GenerationStrategy represents a specific approach to generating
    DSL implementations, with execution tracking and quality metrics.
    """
  end
end